#!/bin/bash

# DTD-Tools Source fetcher.
# Uses a yaml file with source definitions to fetch
# Iso files, tracks, tools and other content from various sources.

dtd_source_get_all() {
  all_sources=( $dtd_src_sources )
  for source in "${all_sources[@]}"; do dtd_source_get $source; done
}

dtd_source_check() {
  eval dtd_file=\$dtd_src_${1}_file
  eval dtd_dir=\$dtd_src_${1}_dir
  if [ $2 ];
    then
      dtd_dest=$dtd_build_dir/var/sources/$2
    else
      dtd_dest=$dtd_build_dir/var/sources/$1
  fi
  echo "$dtd_build_dir"
  if [ -z "$dtd_file" ]; then
    dtd_state=`cat $dtd_dest/$dtd_file.state`
  fi
  if [ -z "$dtd_dir" ]; then
    dtd_state=`cat $dtd_dest/$dtd_dir.state`
  fi
  case "$dtd_state" in
    downloading )
      eval dtd_method=\$dtd_src_${1}_method
      case "$dtd_method" in
        http )
          dtd_job=`jobs | grep $dtd_file`
          if [ ! "$dtd_job" ]; then
            state="done"
          fi
          ;;
      esac
      if [ -f $dtd_dest/$dtd_file ]; then
        eval dtd_size=\$dtd_src_${1}_size
        if [ "$dtd_size" != "" ]; then
          current_size=`ls -lrt $dtd_dest/$dtd_file | nawk '{print $5}'`
          if [ "$current_size" == "$dtd_size" ]; then
            dtd_state="downloaded"
          fi
        fi
      fi
      ;;
    downloaded )
      eval dtd_md5=\$dtd_src_${1}_md5
      if [ ! "$dtd_md5" ]; then
        current_md5=`md5sum $dtd_dest/$dtd_file | awk '{ print $1 }'`
        if [ "$current_md5" == "$dtd_md5" ]; then
          dtd_state="done"
        fi
      fi
      ;;
    done )
      ;;
  esac
  if [ -z $dtd_file ]; then
    echo $dtd_state > $dtd_dest/"$dtd_file".state
  fi
  if [ -z "$dtd_dir" ]; then
    echo $dtd_state > $dtd_dest/$dtd_dir.state
  fi
  echo $state

}

dtd_source_get_http() {
  eval dtd_url=\$dtd_src_${1}_url
  eval dtd_file=\$dtd_src_${1}_file
  if [ $2 ];
    then
      dtd_dest=$dtd_build_dir/var/sources/$2
    else
      dtd_dest=$dtd_build_dir/var/sources/$1
  fi

  # start the download
  curl -sL $dtd_url > $dtd_dest/$dtd_file &
  echo "downloading" > $dtd_dest/$dtd_file.state
}

dtd_source_get_torrent() {
  eval dtd_torrent=\$dtd_src_${1}_url
  eval dtd_file=\$dtd_src_${1}_file
  if [ $2 ];
    then
      dtd_dest=$dtd_build_dir/var/sources/$2
    else
      dtd_dest=$dtd_build_dir/var/sources/$1
  fi
  # Add the torrent to transmission
  transmission-remote \
    $dtd_local_transmission_host \
    --auth=$dtd_local_transmission_auth \
    -w $dtd_dest/ \
    --add $dtd_torrent
  echo "downloading" > $dtd_dest/$this_file.state
}

dtd_source_get_git() {
  eval dtd_url=\$dtd_src_${1}_url
  eval dtd_dir=\$dtd_src_${1}_dir
  eval dtd_branch=\$dtd_src_${1}_branch
  eval dtd_tag=\$dtd_src_${1}_tag
  if [ $2 ];
    then
      dtd_dest=$dtd_build_dir/var/sources/$2
    else
      dtd_dest=$dtd_build_dir/var/sources/$1
  fi
  # dtd_dest=$dtd_dest/$1
  echo $dtd_dest
  pushd $dtd_dest
  git clone $dtd_url
  cd $dtd_dir
  if [ "$dtd_branch" ]; then
    git checkout $dtd_branch
  fi
  if [ "$dtd_tag" ]; then
    git checkout tags/$dtd_tag
  fi
  popd
  echo "done" > $dtd_dest/$dtd_dir.state
}

dtd_source_get() {
  eval dtd_method=\$dtd_src_${1}_method
  case "$dtd_method" in
    http)
      dtd_source_get_http $1 $2
      ;;
    torrent)
      dtd_source_get_torrent $1 $2
      ;;
    git)
      dtd_source_get_git $1 $2
      ;;
  esac
  source_state="done"
  while [ "$source_state" != "done" ]; do
    source_state=`dtd_source_check "$1" "$2"`
    echo $source_state
    sleep 5
  done
}

dtd_source_get_win() {
  echo
  win_sources=( $dtd_src_win_sources )
  for source in "${win_sources[@]}"; do dtd_source_get $source win; done
}


dtd_tracks_get() {
 dtd_source_get $1 tracks/$1
}

#!/bin/bash

###################################################################################
# UCK - Ubuntu Customization Kit                                                  #
# Copyright (C) 2006-2010 UCK Team                                                #
#                                                                                 #
# UCK is free software: you can redistribute it and/or modify                     #
# it under the terms of the GNU General Public License as published by            #
# the Free Software Foundation, either version 3 of the License, or               #
# (at your option) any later version.                                             #
#                                                                                 #
# UCK is distributed in the hope that it will be useful,                          #
# but WITHOUT ANY WARRANTY; without even the implied warranty of                  #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                   #
# GNU General Public License for more details.                                    #
#                                                                                 #
# You should have received a copy of the GNU General Public License               #
# along with UCK.  If not, see <http://www.gnu.org/licenses/>.                    #
###################################################################################

function failure()
{
	echo "$@"
	exit 1
}

function prepare_install()
{
	#try 2 times to avoid slow proxies failures
	apt-get update || apt-get update || failure "apt-get update failed, error=$?"
}

function install_packages()
{
	apt-get install --assume-yes --force-yes "$@" || failure "apt-get install $@ failed, error=$?"
}

function remove_packages()
{
	apt-get --purge remove --assume-yes --force-yes "$@" || failure "apt-get remove $@ failed, error=$?"
}

function upgrade_packages()
{
       apt-get upgrade --awsume-yes --force-yes
}

SCRIPT_DIR=`dirname "$0"`

LIVECD_LANGS=`cat "$SCRIPT_DIR/language_packs"`
DESKTOP_TYPE=`cat "$SCRIPT_DIR/desktop_type"`

DESKTOP_FLAVOURS=`cat "$SCRIPT_DIR/desktop_types"`

# Print some information on the system being customized:
rel="`lsb_release -is` `lsb_release -rs`"
kernel=`ls /boot/config-* | sed 's/.*config-//'`
arch=`if [ -d /lib64 ]; then echo x86_64; else echo i586; fi`
echo ">> Customizing: $rel, $kernel $arch"

prepare_install || failure "Preparing installation failed, error=$?"

# Cleanup of unused packages.
apt-get --purge remove --assume-yes --force-yes thunderbird gimp gnumeric abiword hplip libsane poppler-data libgutenprint2 parole xfburn gmusicbrowser gmusicbrowser blueman simple-scan pulseaudio bluez pidgin cups transmission-gtk gnome-sudoku gnome-mines orage

apt-get autoremove --assume-yes --force-yes

# List of packages to install to support the selected languages:
PACKAGES_TO_INSTALL=""
# Pattern to match all selected language packs:
LANGPACKS_CONCATENATED=""
# List of language related packages available in the repositories:
REPO_LANGS=`apt-cache search "^language-" | sed 's/[ 	].*//'`

echo "Installing language packs ($LIVECD_LANGS)..."
if [ -n "$LIVECD_LANGS" ]; then
	for l in $LIVECD_LANGS; do
		# Add language specific packages not releated to kde or gnome
		add=`echo "$REPO_LANGS" | grep -- -"$l" | grep -Ev "kde|gnome"`
		PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL $add"

		# Add desktop specific language packages
		if [ -n "$DESKTOP_FLAVOURS" ]; then
			for f in $DESKTOP_FLAVOURS; do
				add=`echo "$REPO_LANGS" | grep -- -$f-$l`
				PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL $add"
			done
		fi
                # Add firefox locales
                add=`echo "firefox-locale-"$l"`
                PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL $add"

		if [ -z "$LANGPACKS_CONCATENATED" ]; then
			LANGPACKS_CONCATENATED="$l"
		else
			LANGPACKS_CONCATENATED="$LANGPACKS_CONCATENATED|$l"
		fi
	done

	install_packages $PACKAGES_TO_INSTALL ||
		failure "Installing language packs failed, error=$?"

	# NOTE:	we first install selected language packs, then remove others as
	#	installing a language pack might pull in packages that were not
	#	previously present
	echo "Removing unnecessary language packages..."
	REMOVED_PACKAGES=`dpkg-query --show | cut -f1 | grep -E '^(language-pack|language-support|firefox-locale)' | grep -Ev "[-]($LANGPACKS_CONCATENATED)\>"`
	remove_packages $REMOVED_PACKAGES ||
		failure "Removing packages failed, error=$?"
fi

# Installing updates.
apt-get upgrade --awsume-yes --force-yes

# Installing dtd-stack.
source $SCRIPT_DIR/dtd-stack

# Install composer
mkdir -p /opt/composer
cp $SCRIPT_DIR/composer.gz /opt/composer
gunzip /opt/composer/composer.gz
ln -s /opt/composer/composer /usr/local/bin/composer

# Install drush
tar xzf $SCRIPT_DIR/drush.tgz -C /opt
ln -s /opt/drush/drush /usr/local/bin/drush

# Extract tracks
mkdir -p /opt/dtd
unzip $SCRIPT_DIR/dtd-tracks.zip -d /var/www/html

# Initialize sites

# Install Atom

# Install gate-one

echo "Done"
